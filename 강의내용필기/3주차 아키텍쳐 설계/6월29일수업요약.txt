2일차

tatics, 설계의 기본 원리
<가, 변, 성, 보 시, 사>

*. 페르소나 : 대표사용자라는뜻

태틱을 잘 선택하기 위한 중요 포인트
***. 어떤 전술을 사용할 것인가
**. 최신 트랜드의 해결방법 검색능력
*. 많이 알아야 함

태틱을 잘하기 위한 요소
1. 의사소통
2. 전략적 사고
3. 설계 역량

가용성 : 결함을 줄이거나, 기능이 계속 유지되게 하기 위한 전술
- 결함탐지
*. 핑 에코 방식 : 살아있는지 여부를 계속 확인
*. 생명주기 신호(Heartbeat) : 타겟시스템이 살아있는지를 계속 보냄
*. 예외발생 : 타겟시스템 자체적으로 비정상을 감지하고 통보함
- 복구
*. 활성중복
*. 비활성중복

변경용이성 : 변경요청에 대해 시간과 예산 안에서 변경이 가능하도록 설계
*. 모듈을 작게 : LOC가 아닌 각 모듈의 역할과 책임을 작게하는것
*. 밀집성 증가 : Cohesion, 모듈 내부의 필요한 정보는 서로 모이도록
*. 결합성 감소 : 각 모듈간의 의존성을 감소
*. 지연바인딩

성능 : 시스템에 도착한 이벤트에 대한 응답을 제약 시간 내에 만들어 내는 것
*. 리퀘스트 관리
*. 리소스 증설 : Scale up (사양을 높임), Scale out (서버를 늘림, Elastic)

보안 : 시스템의 공격을 탐지하거나 저항하거나 복구하는것
*. 행위자 식별, 인증, 권한, 접근제한 !

[성능]
- 로드밸런서 : 부하가 심할 경우 부하를 나눠가질 수 있도록
- 서버의 동적확장 : 로드밸런서로도 부하 분배가 안되는 과부하 상황에서 동적으로 서버를 늘릴수있게 (scale out)

[가용성]
- 비활성 대체 서버로 연결
- 활성 대체 서버로 연결 (액티브 리던던트)
- 빠르게 서버를 재시작
- 서버간 클러스터링을 통해 클러스터끼리 미러링
- 주기적인 핑 송수신으로 비정상 상황 체크

<예제>------------------------------------------------------------------
Tactic 수립 방향(유의점)
1) 사용자의 콘텐츠와 사용자의 이벤트를 처리하기 위해 RESTFul API 방식의 프레임워크를 선정" 하며,
  콘텐츠로 업로드할 수 있는 가용량을 측정하여 2-1)저장소용량산출, 2-2)업로드 네트워크 Bandwidth 대역폭을 산출" 해야한다.
  사용자의 콘텐츠를 다운로드 할 수 있는 3)다운로드 네트워크 Bandwidth 설정 대역폭" 을 푸립한다. 또한, 4)업로드 프로세스",
  5) 이어 업로드 ......

Framework 선정 검토 내용
 - 사용자에게 빠른 응답을 하기 위해 초경량 서버를 도입해야 하는 관점
 - 웹서버와 동일한 기능을 제공해야하는 점
 - ...
 - ...

위 사항을 고려하였을 때 빠르고, 개발 시간 단축이 되며 개발 경험을 바탕으로 Spack을 사용하는것이 가장 적절함

결론
 - 사용자에게도 빠른 서비스를 제공하고 개발시간 단축을 위해 SPack Framework을 선정하였다. 사용자와 미디어 관제 시스템의 접점 포인트를 RESTfull API형태로 제공한다.
 - 최대 동시 접속자는 1000명으로 예상하지만 사용자 증가에 따른 서버와 네트워크 가용량 등은 시스템 자원을 모니터링 할 수 있는 nagios를 사용한다.

접근법 분석 :
 - 절충점 : 성능 -> 유연성(-), 연동성(-), 유지보수성(-), 이식성(-)
 - 민감점 : 네트워크 사업자의 품질에 따라 상이할 수 있음
 - 리스크 : 사용자가 계속해서 증가함에 따라 저장소 가용량, 네트워크, Bandwidth등도 비례해서 증가함. 그에 따른 비용적인 부분도 고려해야함

------------------------------------------------------------------

*. 아키텍처 드라이버로 선택된 요구사항만 선정해서 태틱수립
1. 태틱을 풀어내기 위해 고려할점 정리
2. 각각을 어떤 태틱으로 해결할지 고민한 흔적이 보여야함
3. 그래서 어떤걸 선택했고, 안했는지 정리

아키타입 : 드라이버와 태틱만의 정보로 아키텍트가 직관적으로 떠올리는 기능의 묶음 혹은 묶음들의 관계 정도가 나타난 아키텍처 스캐치

SDP(Stable Dependency Principle) : 안정성의 방향으로 의존하라.
SAP(Stable abstractions Principle) : 컴포넌트는 안정된 정도만큼만 추상화되어야 한다.
ADP(Acyclic Dependencies Principle) : 컴포넌트 의존성 그래프에 순환이 있어서는 안된다.
 => 세가지 원칙이 지켜져야 변경이 용이한 설계로 갈 수 있다.


1. 확장엔 열리고 변경에는 닫힐려면, (OCP)
2. 한 클래스가 하나의 역할을 해야하고, (SRP)
3. 그놈이 결국 안정적인 방향으로 의존해야함 (SDP)
4. 안정된 정도로만 추상화가 되어야 하며, (SAP)
5. 의존성 그래프에 순환이 있어서는 안된다. (ADP)

|-----------------|
|       OCP       |
|-----------------|
| LSP | ISP | DIP |
|-----------------|
| SDP | SAP | ADP |
|-----------------|
|       SRP       |
|-----------------|


아키타입, 구조, 원칙에 의해 변화되는 과정